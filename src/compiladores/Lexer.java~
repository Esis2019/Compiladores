/* The following code was generated by JFlex 1.4.3 on 22/11/19 14:09 */

package compiladores;
import static compiladores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/11/19 14:09 from the specification file
 * <tt>D:/Multimedia/Documentos/NetBeansProjects/compiladores/src/compiladores/Lexico.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\47\1\0\1\54"+
    "\1\0\1\11\1\32\1\0\1\17\1\20\1\6\1\24\1\3\1\25"+
    "\1\22\1\4\12\2\1\15\1\21\1\10\1\50\1\13\1\23\1\0"+
    "\32\1\1\14\1\0\1\16\1\26\1\51\1\0\1\36\1\33\1\43"+
    "\1\40\1\52\1\61\1\63\1\60\1\34\1\1\1\57\1\46\1\44"+
    "\1\37\1\30\1\45\1\53\1\31\1\55\1\35\1\56\1\65\1\64"+
    "\1\27\1\62\1\66\1\7\1\41\1\12\1\42\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\3\2\1\30\6\2\1\31\1\32\4\2\1\33\1\34"+
    "\1\2\1\35\6\2\1\4\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\1\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\2\1\56"+
    "\2\2\1\57\1\60\4\2\1\61\12\2\1\62\2\2"+
    "\1\56\1\63\11\2\1\64\1\65\22\2\1\66\1\67"+
    "\1\0\1\70\1\71\1\27\10\2\1\72\2\2\1\73"+
    "\4\2\1\57\1\74\1\2\1\33\1\2\1\75\35\2"+
    "\1\76\11\2\1\3\6\2\1\77\4\2\1\100\2\2"+
    "\1\101\2\2\1\102\12\2\1\103\1\2\1\104\1\105"+
    "\4\2\1\106\3\2\1\107\1\110\14\2\1\111\2\2"+
    "\1\112\3\2\1\63\4\2\1\113\1\31\3\2\1\114"+
    "\13\2\1\115\1\32\1\116\1\117\13\2\1\120\1\2"+
    "\1\121\1\2\1\122\1\2\1\123\1\124\1\2\1\125"+
    "\2\2\1\55\2\2\1\126\1\2\1\127\1\130\1\2"+
    "\1\131\2\2\1\60\1\64\1\2\1\132\1\133\7\2"+
    "\1\134\1\135\1\136\1\2\1\137\1\140\1\141\1\142"+
    "\1\143\1\2\1\144\10\2\1\145\1\2\1\146\3\2"+
    "\1\147\1\2\1\150\3\2\1\151\1\2\1\152\1\153"+
    "\1\2\1\154\1\155\1\156\2\2\1\157\2\2\1\160"+
    "\1\2\1\161\1\162\1\2\1\163\2\2\1\164\3\2"+
    "\1\165\3\2\1\166\1\2\1\167\3\2\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\67\0\u014a"+
    "\0\67\0\u0181\0\u01b8\0\67\0\u01ef\0\67\0\u0226\0\67"+
    "\0\u025d\0\67\0\67\0\u0294\0\67\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\67\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\67\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\67\0\67\0\67\0\u08cf\0\67"+
    "\0\67\0\u0906\0\67\0\67\0\u093d\0\67\0\u0974\0\67"+
    "\0\67\0\u09ab\0\67\0\67\0\67\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\67\0\67\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\156"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\67\0\67\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\67\0\67\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\67\0\67\0\u1432\0\67"+
    "\0\67\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\156\0\u1658\0\u168f\0\156\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\156\0\u17d9\0\u1810\0\u1847\0\156"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\156\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\67"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\156\0\u21f2"+
    "\0\u2229\0\u2260\0\u2297\0\156\0\u22ce\0\u2305\0\156\0\u233c"+
    "\0\u2373\0\156\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\u2562\0\u2599\0\156\0\u25d0\0\156\0\156"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\156\0\u26e3\0\u271a\0\u2751"+
    "\0\156\0\156\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\156\0\u2a1c"+
    "\0\u2a53\0\156\0\u2a8a\0\u2ac1\0\u2af8\0\156\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\156\0\156\0\u2c0b\0\u2c42\0\u2c79\0\156"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\156\0\156\0\156\0\u2f44"+
    "\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc"+
    "\0\u3133\0\u316a\0\156\0\u31a1\0\156\0\u31d8\0\156\0\u320f"+
    "\0\156\0\156\0\u3246\0\156\0\u327d\0\u32b4\0\156\0\u32eb"+
    "\0\u3322\0\156\0\u3359\0\156\0\156\0\u3390\0\156\0\u33c7"+
    "\0\u33fe\0\156\0\156\0\u3435\0\156\0\156\0\u346c\0\u34a3"+
    "\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\156\0\156\0\156"+
    "\0\u35ed\0\156\0\156\0\156\0\u3624\0\156\0\u365b\0\156"+
    "\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813"+
    "\0\156\0\u384a\0\156\0\u3881\0\u38b8\0\u38ef\0\156\0\u3926"+
    "\0\156\0\u395d\0\u3994\0\u39cb\0\156\0\u3a02\0\156\0\156"+
    "\0\u3a39\0\156\0\156\0\156\0\u3a70\0\u3aa7\0\156\0\u3ade"+
    "\0\u3b15\0\156\0\u3b4c\0\156\0\156\0\u3b83\0\156\0\u3bba"+
    "\0\u3bf1\0\156\0\u3c28\0\u3c5f\0\u3c96\0\156\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\156\0\u3d72\0\156\0\u3da9\0\u3de0\0\u3e17\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\3\1\53\1\3\1\54\1\55\1\56\2\3"+
    "\1\57\1\3\1\60\1\61\1\62\1\3\70\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\2\0\1\4\67\0\1\5\67\0\1\63"+
    "\1\0\1\64\41\0\1\65\66\0\1\66\26\0\1\67"+
    "\1\11\3\0\1\16\32\0\1\70\31\0\1\14\34\0"+
    "\1\71\31\0\1\72\34\0\1\73\31\0\1\20\1\0"+
    "\1\74\76\0\1\75\47\0\1\76\13\0\1\77\70\0"+
    "\1\100\23\0\1\101\31\0\1\102\11\0\1\103\22\0"+
    "\1\104\66\0\1\105\17\0\2\3\24\0\1\3\1\106"+
    "\1\3\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\2\3\1\107\1\0\6\3"+
    "\2\0\2\3\1\110\1\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\111\1\3\1\0\12\3\32\0\1\112"+
    "\15\0\1\113\17\0\2\3\24\0\1\3\1\114\1\115"+
    "\1\0\1\3\1\116\4\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\4\3"+
    "\1\117\1\3\2\0\4\3\2\0\3\3\1\0\4\3"+
    "\1\120\5\3\1\0\2\3\24\0\2\3\1\121\1\0"+
    "\6\3\2\0\4\3\2\0\1\3\1\122\1\3\1\0"+
    "\3\3\1\123\1\3\1\124\4\3\1\0\2\3\24\0"+
    "\3\3\1\0\4\3\1\125\1\3\2\0\4\3\2\0"+
    "\3\3\1\0\1\126\1\127\10\3\1\0\2\3\24\0"+
    "\1\3\1\130\1\3\1\0\3\3\1\131\2\3\2\0"+
    "\4\3\2\0\1\3\1\132\1\3\1\0\12\3\1\0"+
    "\2\3\24\0\1\3\1\133\1\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\3\1\134\1\3\1\0\5\3\1\135"+
    "\4\3\41\0\1\136\6\0\1\137\17\0\2\3\24\0"+
    "\1\3\1\140\1\3\1\0\3\3\1\141\2\3\2\0"+
    "\3\3\1\142\2\0\3\3\1\0\3\3\1\143\6\3"+
    "\1\0\2\3\24\0\3\3\1\0\3\3\1\144\2\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\3\1\145\10\3"+
    "\1\0\2\3\24\0\2\3\1\146\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\1\3\1\147\10\3\1\0"+
    "\2\3\24\0\1\3\1\150\1\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\50\0\1\151\66\0"+
    "\1\152\17\0\2\3\24\0\1\153\2\3\1\0\4\3"+
    "\1\154\1\3\2\0\3\3\1\155\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\1\3\1\156"+
    "\1\157\3\3\2\0\4\3\2\0\3\3\1\0\3\3"+
    "\1\160\3\3\1\161\2\3\1\0\2\3\24\0\3\3"+
    "\1\0\4\3\1\162\1\3\2\0\4\3\2\0\3\3"+
    "\1\0\1\163\11\3\1\0\2\3\24\0\1\3\1\164"+
    "\1\165\1\0\3\3\1\166\2\3\2\0\3\3\1\167"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\1\3"+
    "\1\170\1\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\1\171\3\3\2\0\3\3\1\0\3\3\1\172"+
    "\6\3\1\0\2\3\24\0\1\3\1\173\1\3\1\0"+
    "\1\3\1\174\4\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\5\63\1\0\61\63\50\0\1\175\66\0\1\176"+
    "\20\0\1\177\106\0\1\200\52\0\1\201\61\0\2\3"+
    "\24\0\2\3\1\202\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\1\203\2\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\204\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\1\3\1\205\1\206\3\3\2\0"+
    "\4\3\2\0\3\3\1\0\6\3\1\207\3\3\1\0"+
    "\2\3\24\0\1\3\1\210\1\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\211"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\2\3\1\212\3\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\2\3\1\213"+
    "\3\3\2\0\3\3\1\214\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\1\3\1\215\3\3\1\216\4\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\1\3"+
    "\1\217\2\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\2\3\1\220\1\0\1\3\1\221\4\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\2\3\1\222\1\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\5\3\1\223\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\1\3"+
    "\1\224\2\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\2\3\1\225\3\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\2\3\1\226\3\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\1\3\1\227\2\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\7\3\1\230\2\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\1\3\1\231\10\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\3\3\1\232\2\0\3\3\1\0"+
    "\4\3\1\233\5\3\1\0\2\3\24\0\3\3\1\0"+
    "\4\3\1\234\1\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\4\3\1\235"+
    "\1\3\2\0\1\3\1\236\2\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\2\3\1\237"+
    "\3\3\2\0\4\3\2\0\3\3\1\0\1\240\11\3"+
    "\1\0\2\3\24\0\3\3\1\0\3\3\1\241\2\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\3\3\1\242\2\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\1\3\1\243\4\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\2\3"+
    "\1\244\3\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\1\3\1\245\1\3\1\0\1\3"+
    "\1\246\4\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\1\247\5\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\4\3\1\250\1\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\2\3\1\251\3\3\2\0\2\3\1\252\1\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\3\3\1\0\1\3\1\253"+
    "\10\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\1\254\11\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\6\3\1\255\2\3\1\256\1\0\2\3\24\0"+
    "\2\3\1\257\1\0\3\3\1\260\2\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\1\3"+
    "\1\261\1\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\1\3"+
    "\1\262\4\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\1\3\1\263\4\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\264\11\3\1\0"+
    "\2\3\24\0\3\3\1\0\1\3\1\265\4\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\2\3\1\266\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\1\3"+
    "\1\267\4\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\3\3"+
    "\1\270\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\1\3\1\271\1\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\2\3\1\272\3\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\3\3\1\273\6\3\1\0"+
    "\2\3\24\0\3\3\1\0\1\3\1\274\4\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\1\3\1\275\4\3\2\0\3\3\1\276"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\2\3"+
    "\1\277\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\2\0\1\177\15\0\1\300\47\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\301\2\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\302\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\2\3\1\303\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\4\3\1\304\1\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\3\3\1\0\1\3\1\305"+
    "\10\3\1\0\2\3\24\0\3\3\1\0\1\3\1\306"+
    "\4\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\3\3\1\307"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\310\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\1\3\1\311\1\3"+
    "\1\0\3\3\1\312\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\1\3"+
    "\1\313\4\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\314\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\2\3\1\315\1\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\1\3"+
    "\1\316\1\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\317\11\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\1\3\1\320\1\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\321\2\3"+
    "\1\0\12\3\1\0\2\3\24\0\1\3\1\322\1\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\323\2\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\324"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\1\325\5\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\326\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\3\3\1\327\2\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\330\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\2\3"+
    "\1\331\3\3\2\0\4\3\2\0\3\3\1\0\1\332"+
    "\11\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\2\3\1\333\1\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\1\334\3\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\1\3\1\335\1\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\336\11\3\1\0"+
    "\2\3\24\0\2\3\1\337\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\4\3\1\340\1\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\3\3"+
    "\1\341\2\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\2\3\1\342\3\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\10\3\1\343\1\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\3\3\1\344\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\6\3\1\345\3\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\1\3\1\346\1\3\1\0\12\3\1\0\2\3\24\0"+
    "\1\3\1\347\1\3\1\0\6\3\2\0\3\3\1\350"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\1\3\1\351\2\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\352\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\4\3\1\353\1\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\1\3"+
    "\1\354\1\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\1\3"+
    "\1\355\10\3\1\0\2\3\24\0\3\3\1\0\2\3"+
    "\1\356\3\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\2\3\1\357\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\2\3\1\360\3\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\1\3\1\361"+
    "\1\3\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\1\3\1\362"+
    "\4\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\4\3\1\363\1\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\364"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\3\3\1\0\1\365\11\3"+
    "\1\0\2\3\24\0\3\3\1\0\3\3\1\366\2\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\1\3\1\367\1\3\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\370\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\3\3\1\371\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\5\3\1\372\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\373\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\2\3"+
    "\1\374\3\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\375\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\2\3"+
    "\1\376\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\3\3\1\377\2\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\2\3\1\u0100"+
    "\3\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\2\3\1\u0101\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\1\u0102"+
    "\11\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\2\3\1\u0103\7\3\1\0"+
    "\2\3\24\0\2\3\1\u0104\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\4\3\1\u0105\1\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\4\3"+
    "\1\u0106\1\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\3\3"+
    "\1\u0107\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\7\3\1\u0108\2\3\1\0\2\3\24\0\3\3\1\0"+
    "\1\3\1\u0109\2\3\1\u010a\1\u010b\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\1\3\1\u010c\1\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\3\1\u010d\1\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\1\u010e\11\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\3\3\1\u010f\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\2\3\1\u0110"+
    "\3\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\1\3\1\u0111\10\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\1\3\1\u0112\2\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\1\3\1\u0113\4\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\2\3\1\u0114"+
    "\3\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\3\3\1\u0115"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\3\3"+
    "\1\u0116\6\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\u0117\11\3\1\0"+
    "\2\3\24\0\3\3\1\0\1\u0118\5\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\1\3\1\u0119\1\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\3\3"+
    "\1\u011a\2\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\1\3\1\u011b\4\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\2\3\1\u011c\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\2\3\1\u011d"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\1\3\1\u011e\4\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\1\3"+
    "\1\u011f\1\3\1\0\12\3\1\0\2\3\24\0\1\3"+
    "\1\u0120\1\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\1\u0121\3\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\1\3\1\u0122\4\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\2\3\1\u0123\3\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\1\u0124\3\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\4\3\1\u0125\1\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\6\3\1\u0126\3\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\6\3"+
    "\1\u0127\3\3\1\0\2\3\24\0\3\3\1\0\4\3"+
    "\1\u0128\1\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\u0129\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\2\3\1\u012a\3\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\2\3"+
    "\1\u012b\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\3\1\u012c\1\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\2\3\1\u012d\3\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\1\3\1\u012e\10\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\4\3\2\0\2\3\1\u012f\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\2\3\1\u0130\3\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\1\3"+
    "\1\u0131\1\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\4\3\1\u0132\1\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\2\3"+
    "\1\u0133\3\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\5\3\1\u0134\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\u0135"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\3\3\1\u0136\2\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\5\3\1\u0137"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\3\3\1\u0138\2\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\1\3\1\u0139\1\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\2\3\1\u013a\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\2\3\1\u013b\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\2\3\1\u013c\1\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\u013d\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\1\3\1\u013e\1\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\3\3\1\u013f\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\1\3\1\u0140\4\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\4\3\1\u0141"+
    "\1\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\1\u0142\2\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\3\3\1\u0143\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\1\u0144\3\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\2\3\1\u0145\3\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\1\u0146\3\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\4\3\1\u0147"+
    "\1\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\2\3\1\u0148\3\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\1\u0149\3\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\5\3"+
    "\1\u014a\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\4\3\1\u014b\5\3\1\0\2\3\24\0"+
    "\3\3\1\0\2\3\1\u014c\3\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\6\3\2\0\1\u014d\3\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\3\3\1\u014e\6\3\1\0\2\3"+
    "\24\0\3\3\1\0\4\3\1\u014f\1\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\5\3\1\u0150\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\u0151\2\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\1\3\1\u0152\4\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\u0153\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\1\3\1\u0154\1\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\2\3\1\u0155\1\0\6\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\u0156"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\2\3\1\u0157\3\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\1\3\1\u0158\2\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\4\3\1\u0159\5\3\1\0\2\3\24\0"+
    "\3\3\1\0\3\3\1\u015a\2\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\2\3\1\u015b\3\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\1\u015c\3\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\3\3"+
    "\1\0\1\3\1\u015d\10\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\1\u015e\3\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\3\1\u015f\1\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\2\3\1\u0160\3\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\3\1\u0161"+
    "\1\3\1\0\12\3\1\0\2\3\24\0\3\3\1\0"+
    "\1\3\1\u0162\4\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\4\3\2\0\1\u0163\2\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\1\3"+
    "\1\u0164\1\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\2\3\1\u0165\3\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\3\3\1\u0166\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\3\3\1\u0167"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\2\3"+
    "\1\u0168\1\0\6\3\2\0\4\3\2\0\3\3\1\0"+
    "\12\3\1\0\2\3\24\0\3\3\1\0\6\3\2\0"+
    "\2\3\1\u0169\1\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\2\3\1\u016a\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\1\3\1\u016b\1\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\u016c\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\1\u016d"+
    "\3\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\4\3\2\0\1\u016e\2\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\u016f\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\3\3\1\u0170\2\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\6\3\2\0\4\3\2\0\1\3"+
    "\1\u0171\1\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\2\3\1\u0172\3\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\1\u0173\3\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\5\3\1\u0174\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\1\3\1\u0175\1\3"+
    "\1\0\12\3\1\0\2\3\24\0\2\3\1\u0176\1\0"+
    "\6\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\1\3\1\u0177\1\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\1\u0178\3\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\3\3\1\0\1\u0179\11\3\1\0"+
    "\2\3\24\0\3\3\1\0\5\3\1\u017a\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\3\3\1\u017b\2\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\3\1\u017c\1\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\3\3\1\u017d\2\3"+
    "\2\0\4\3\2\0\3\3\1\0\12\3\1\0\2\3"+
    "\24\0\3\3\1\0\2\3\1\u017e\3\3\2\0\4\3"+
    "\2\0\3\3\1\0\12\3\1\0\2\3\24\0\3\3"+
    "\1\0\6\3\2\0\4\3\2\0\3\3\1\0\1\u017f"+
    "\11\3\1\0\2\3\24\0\3\3\1\0\2\3\1\u0180"+
    "\3\3\2\0\4\3\2\0\3\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\6\3\2\0\4\3\2\0"+
    "\3\3\1\0\1\u0181\11\3\1\0\2\3\24\0\3\3"+
    "\1\0\2\3\1\u0182\3\3\2\0\4\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\6\3"+
    "\2\0\4\3\2\0\1\u0183\2\3\1\0\12\3\1\0"+
    "\2\3\24\0\3\3\1\0\2\3\1\u0184\3\3\2\0"+
    "\4\3\2\0\3\3\1\0\12\3\1\0\2\3\24\0"+
    "\3\3\1\0\6\3\2\0\1\u0185\3\3\2\0\3\3"+
    "\1\0\12\3\1\0\2\3\24\0\3\3\1\0\3\3"+
    "\1\u0186\2\3\2\0\4\3\2\0\3\3\1\0\12\3"+
    "\1\0\2\3\24\0\3\3\1\0\6\3\2\0\4\3"+
    "\2\0\3\3\1\0\1\u0187\11\3\1\0\2\3\24\0"+
    "\3\3\1\0\2\3\1\u0188\3\3\2\0\4\3\2\0"+
    "\3\3\1\0\12\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\16\1\1\11\7\1\1\11\7\1\3\11\1\1\2\11"+
    "\1\1\2\11\1\0\1\11\1\0\2\11\1\1\3\11"+
    "\4\1\2\11\22\1\2\11\11\1\2\11\22\1\2\11"+
    "\1\0\2\11\76\1\1\11\310\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 93: 
          { lexeme=yytext(); return EXTERN;
          }
        case 121: break;
        case 15: 
          { lexeme=yytext(); return id4;
          }
        case 122: break;
        case 59: 
          { lexeme=yytext(); return TRY;
          }
        case 123: break;
        case 94: 
          { lexeme=yytext(); return EXPORT;
          }
        case 124: break;
        case 84: 
          { lexeme=yytext(); return FLOAT;
          }
        case 125: break;
        case 91: 
          { lexeme=yytext(); return DELETE;
          }
        case 126: break;
        case 56: 
          { lexeme=yytext(); return ELLIPSIS;
          }
        case 127: break;
        case 70: 
          { lexeme=yytext(); return LONG;
          }
        case 128: break;
        case 112: 
          { lexeme=yytext(); return EXPLICIT;
          }
        case 129: break;
        case 107: 
          { lexeme=yytext(); return OPERATOR;
          }
        case 130: break;
        case 6: 
          { lexeme=yytext(); return Linea;
          }
        case 131: break;
        case 90: 
          { lexeme=yytext(); return DOUBLE;
          }
        case 132: break;
        case 63: 
          { lexeme=yytext(); return BOOL;
          }
        case 133: break;
        case 12: 
          { lexeme=yytext(); return id24;
          }
        case 134: break;
        case 57: 
          { lexeme=yytext(); return ARROWSTAR;
          }
        case 135: break;
        case 116: 
          { lexeme=yytext(); return PROTECTED;
          }
        case 136: break;
        case 97: 
          { lexeme=yytext(); return STRUCT;
          }
        case 137: break;
        case 5: 
          { lexeme=yytext(); return id14;
          }
        case 138: break;
        case 76: 
          { lexeme=yytext(); return THROW;
          }
        case 139: break;
        case 92: 
          { lexeme=yytext(); return PUBLIC;
          }
        case 140: break;
        case 86: 
          { lexeme=yytext(); return RETURN;
          }
        case 141: break;
        case 89: 
          { lexeme=yytext(); return TYPEID;
          }
        case 142: break;
        case 71: 
          { lexeme=yytext(); return ENUM;
          }
        case 143: break;
        case 69: 
          { lexeme=yytext(); return Main;
          }
        case 144: break;
        case 13: 
          { lexeme=yytext(); return id3;
          }
        case 145: break;
        case 68: 
          { lexeme=yytext(); return CHAR;
          }
        case 146: break;
        case 20: 
          { lexeme=yytext(); return id9;
          }
        case 147: break;
        case 4: 
          { /*Ignore*/
          }
        case 148: break;
        case 52: 
          { lexeme=yytext(); return NOTEQ;
          }
        case 149: break;
        case 99: 
          { lexeme=yytext(); return SWITCH;
          }
        case 150: break;
        case 51: 
          { lexeme=yytext(); return OREQ;
          }
        case 151: break;
        case 53: 
          { lexeme=yytext(); return EQ;
          }
        case 152: break;
        case 9: 
          { lexeme=yytext(); return id23;
          }
        case 153: break;
        case 42: 
          { lexeme=yytext(); return ARROW;
          }
        case 154: break;
        case 80: 
          { lexeme=yytext(); return SHORT;
          }
        case 155: break;
        case 7: 
          { lexeme=yytext(); return id13;
          }
        case 156: break;
        case 43: 
          { lexeme=yytext(); return MINUSMINUS;
          }
        case 157: break;
        case 54: 
          { lexeme=yytext(); return SLEQ;
          }
        case 158: break;
        case 25: 
          { lexeme=yytext(); return id19;
          }
        case 159: break;
        case 11: 
          { lexeme=yytext(); return id2;
          }
        case 160: break;
        case 114: 
          { lexeme=yytext(); return VOLATILE;
          }
        case 161: break;
        case 14: 
          { lexeme=yytext(); return id8;
          }
        case 162: break;
        case 113: 
          { lexeme=yytext(); return UNSIGNED;
          }
        case 163: break;
        case 1: 
          { return ERROR;
          }
        case 164: break;
        case 96: 
          { lexeme=yytext(); return SIZEOF;
          }
        case 165: break;
        case 85: 
          { lexeme=yytext(); return WHILE;
          }
        case 166: break;
        case 81: 
          { lexeme=yytext(); return UNION;
          }
        case 167: break;
        case 44: 
          { lexeme=yytext(); return SUBEQ;
          }
        case 168: break;
        case 77: 
          { lexeme=yytext(); return CONST;
          }
        case 169: break;
        case 104: 
          { lexeme=yytext(); return PRIVATE;
          }
        case 170: break;
        case 103: 
          { lexeme=yytext(); return MUTABLE;
          }
        case 171: break;
        case 28: 
          { lexeme=yytext(); return id22;
          }
        case 172: break;
        case 108: 
          { lexeme=yytext(); return REGISTER;
          }
        case 173: break;
        case 60: 
          { lexeme=yytext(); return ASM;
          }
        case 174: break;
        case 22: 
          { lexeme=yytext(); return id12;
          }
        case 175: break;
        case 72: 
          { lexeme=yytext(); return ELSE;
          }
        case 176: break;
        case 75: 
          { lexeme=yytext(); return BREAK;
          }
        case 177: break;
        case 55: 
          { lexeme=yytext(); return SREQ;
          }
        case 178: break;
        case 87: 
          { lexeme=yytext(); return id18;
          }
        case 179: break;
        case 8: 
          { lexeme=yytext(); return id1;
          }
        case 180: break;
        case 106: 
          { lexeme=yytext(); return VIRTUAL;
          }
        case 181: break;
        case 73: 
          { lexeme=yytext(); return GOTO;
          }
        case 182: break;
        case 18: 
          { lexeme=yytext(); return id7;
          }
        case 183: break;
        case 40: 
          { lexeme=yytext(); return PLUSPLUS;
          }
        case 184: break;
        case 67: 
          { lexeme=yytext(); return CASE;
          }
        case 185: break;
        case 65: 
          { lexeme=yytext(); return THIS;
          }
        case 186: break;
        case 27: 
          { lexeme=yytext(); return id21;
          }
        case 187: break;
        case 61: 
          { lexeme=yytext(); return NEW;
          }
        case 188: break;
        case 50: 
          { lexeme=yytext(); return DO;
          }
        case 189: break;
        case 82: 
          { lexeme=yytext(); return USING;
          }
        case 190: break;
        case 33: 
          { lexeme=yytext(); return SL;
          }
        case 191: break;
        case 21: 
          { lexeme=yytext(); return id11;
          }
        case 192: break;
        case 101: 
          { lexeme=yytext(); return TYPEDEF;
          }
        case 193: break;
        case 100: 
          { lexeme=yytext(); return FRIEND;
          }
        case 194: break;
        case 39: 
          { lexeme=yytext(); return DOTSTAR;
          }
        case 195: break;
        case 35: 
          { lexeme=yytext(); return MODEQ;
          }
        case 196: break;
        case 36: 
          { lexeme=yytext(); return SR;
          }
        case 197: break;
        case 24: 
          { lexeme=yytext(); return id17;
          }
        case 198: break;
        case 78: 
          { lexeme=yytext(); return CATCH;
          }
        case 199: break;
        case 58: 
          { lexeme=yytext(); return INT;
          }
        case 200: break;
        case 17: 
          { lexeme=yytext(); return id6;
          }
        case 201: break;
        case 120: 
          { lexeme=yytext(); return REINTERPRET_CAST;
          }
        case 202: break;
        case 32: 
          { lexeme=yytext(); return MULEQ;
          }
        case 203: break;
        case 64: 
          { lexeme=yytext(); return TRUE;
          }
        case 204: break;
        case 119: 
          { lexeme=yytext(); return DYNAMIC_CAST;
          }
        case 205: break;
        case 45: 
          { lexeme=yytext(); return XOREQ;
          }
        case 206: break;
        case 26: 
          { lexeme=yytext(); return id20;
          }
        case 207: break;
        case 46: 
          { lexeme=yytext(); return OROR;
          }
        case 208: break;
        case 105: 
          { lexeme=yytext(); return WCHAR_T;
          }
        case 209: break;
        case 29: 
          { lexeme=yytext(); return id26;
          }
        case 210: break;
        case 19: 
          { lexeme=yytext(); return id10;
          }
        case 211: break;
        case 37: 
          { lexeme=yytext(); return GTEQ;
          }
        case 212: break;
        case 79: 
          { lexeme=yytext(); return CLASS;
          }
        case 213: break;
        case 66: 
          { lexeme=yytext(); return AUTO;
          }
        case 214: break;
        case 110: 
          { lexeme=yytext(); return TYPENAME;
          }
        case 215: break;
        case 23: 
          { lexeme=yytext(); return id16;
          }
        case 216: break;
        case 74: 
          { lexeme=yytext(); return VOID;
          }
        case 217: break;
        case 95: 
          { lexeme=yytext(); return SIGNED;
          }
        case 218: break;
        case 31: 
          { lexeme=yytext(); return DIVEQ;
          }
        case 219: break;
        case 41: 
          { lexeme=yytext(); return ADDEQ;
          }
        case 220: break;
        case 109: 
          { lexeme=yytext(); return TEMPLATE;
          }
        case 221: break;
        case 47: 
          { lexeme=yytext(); return ANDAND;
          }
        case 222: break;
        case 16: 
          { lexeme=yytext(); return id5;
          }
        case 223: break;
        case 30: 
          { lexeme=yytext(); return coment_1;
          }
        case 224: break;
        case 34: 
          { lexeme=yytext(); return LTEQ;
          }
        case 225: break;
        case 88: 
          { lexeme=yytext(); return INLINE;
          }
        case 226: break;
        case 3: 
          { lexeme=yytext(); return numero;
          }
        case 227: break;
        case 62: 
          { lexeme=yytext(); return FOR;
          }
        case 228: break;
        case 98: 
          { lexeme=yytext(); return STATIC;
          }
        case 229: break;
        case 38: 
          { lexeme=yytext(); return COLONCOLON;
          }
        case 230: break;
        case 118: 
          { lexeme=yytext(); return STATIC_CAST;
          }
        case 231: break;
        case 117: 
          { lexeme=yytext(); return CONST_CAST;
          }
        case 232: break;
        case 83: 
          { lexeme=yytext(); return FALSE;
          }
        case 233: break;
        case 49: 
          { lexeme=yytext(); return IF;
          }
        case 234: break;
        case 48: 
          { lexeme=yytext(); return ANDEQ;
          }
        case 235: break;
        case 102: 
          { lexeme=yytext(); return DEFAULT;
          }
        case 236: break;
        case 115: 
          { lexeme=yytext(); return NAMESPACE;
          }
        case 237: break;
        case 111: 
          { lexeme=yytext(); return CONTINUE;
          }
        case 238: break;
        case 10: 
          { lexeme=yytext(); return id15;
          }
        case 239: break;
        case 2: 
          { lexeme=yytext(); return ident;
          }
        case 240: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
